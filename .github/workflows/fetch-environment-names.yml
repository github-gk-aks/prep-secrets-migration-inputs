name: Fetch Environment Names

on:
  workflow_dispatch:

jobs:
  fetch-environments:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.GK_PAT }}
            path: ./source-repo

      - name: Check if output directory exists
        run: |
            if [ ! -d "${{ github.workspace }}/source-repo/output" ]; then
                echo "Output directory does not exist. Creating..."
                mkdir -p "${{ github.workspace }}/source-repo/output"
            else
                echo "Output directory already exists."
            fi

      - name: Import GPG key
        run: |
            echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
            GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
    
      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
            rm -rf /tmp/gpg.sh
            echo '#!/bin/bash' >> /tmp/gpg.sh
            echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
            chmod +x /tmp/gpg.sh
    
      - name: Setup git
        run: |
            git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
            git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
            git config --global commit.gpgsign true
            git config --global user.signingkey $GPG_KEY_ID
            git config --global gpg.program /tmp/gpg.sh
        env:
            GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Fetch environment names
        run: |
          mapfile -t repositories < "${{ github.workspace }}/source-repo/repositories.txt"
          for repo in "${repositories[@]}"; do
            IFS='/' read -r org_name repo_name <<< "$repo"
            echo "Processing repository: $org_name/$repo_name"         
                     
            # Call GitHub API to fetch environments for the repository
            response=$(curl -sSL \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ secrets.GK_PAT }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/$org_name/$repo_name/environments")

            total_count=$(echo "$response" | jq -r '.total_count')
            if [[ $total_count -eq 0 ]]; then
                echo "$repo No-environments-configured" >> "${{ github.workspace }}/source-repo/output/get-environment-name.txt"
            else
                # Parse the response and extract environment names
                environment_names=$(echo "$response" | jq -r '.environments | .[] | .name')
                for environments in $environment_names; do
                # Output repository name and environment names to output.txt
                    echo "$repo $environments" >> "${{ github.workspace }}/source-repo/output/get-environment-name.txt"
                done
            fi
          done   

      - name: Upload environmnet name file as artifact
        uses: actions/upload-artifact@v4
        with:
            name: get-environment-name.txt
            path: ./source-repo/output
          
    #   - name: Commit Changes
    #     run: |
    #         cd ${{ github.workspace }}/source-repo/output
    #         if [ -n "$(git status --porcelain)" ]; then
    #         git pull origin
    #         git add get-environment-name.txt
    #         git commit -S -m "Add get-environment-name.txt - $(date +"%Y-%m-%d %H:%M:%S")" 
    #         git push
    #         else
    #         echo "No changes to commit."
    #         fi
    #         cd ${{ github.workspace }}
    #     env:
    #         GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
    #         working-directory: ${{ github.workspace }}

  fetch-environments-secrets:
        needs: fetch-environments
        runs-on: ubuntu-latest
        env:
          DEST_PAT_TOKEN: Dummy
        steps:
          - name: Checkout central repository
            uses: actions/checkout@v4
            with:
                token: ${{ secrets.GK_PAT }}
                path: ./source-repo
            
          - name: Download environmnet name file as artifact
            uses: actions/download-artifact@v4
            with:
                name: get-environment-name.txt
                path: ./source-repo/output  # Download to the current directory
        
          - name: Process environment names and fetch secrets
            run: |
                while IFS= read -r line; do
                  repository=$(echo "$line" | awk '{print $1}')
                  environment=$(echo "$line" | awk '{print $2}')
                  if [ "$environment" = "No-environments-configured" ]; then
                      echo "$repository;No-Environment;NA;${{ env.DEST_PAT_TOKEN }}" >> "${{ github.workspace }}/source-repo/output/get-environment-secrets.txt"
                  else
                      response=$(curl -sSL -H "Accept: application/vnd.github+json" \
                      -H "Authorization: Bearer ${{ secrets.GK_PAT }}" \
                      -H "X-GitHub-Api-Version: 2022-11-28" \
                      "https://api.github.com/repos/$repository/environments/$environment/secrets")

                      if [[ $(echo "$response" | jq '.secrets | length') -eq 0 ]]; then
                        echo "$repository;$environment;No-Secrets;${{ env.DEST_PAT_TOKEN }}" >> "${{ github.workspace }}/source-repo/output/get-environment-secrets.txt"
                      else
                          secrets=$(echo "$response" | jq -r '.secrets | .[] | .name')
                          for secret in $secrets; do
                            echo "$repository;$environment;$secret;${{ env.DEST_PAT_TOKEN }}" >> "${{ github.workspace }}/source-repo/output/get-environment-secrets.txt"
                          done
                      fi
                  fi
                done < ./source-repo/output/get-environment-name.txt

          - name: Upload environment secrets file as artifact
            uses: actions/upload-artifact@v4
            with:
                name: get-environment-secrets.txt
                path: ./source-repo/output

          - name: Import GPG key
            run: |
                echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
            env: 
                GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
            
          - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
            run: |
                rm -rf /tmp/gpg.sh
                echo '#!/bin/bash' >> /tmp/gpg.sh
                echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
                chmod +x /tmp/gpg.sh
        
          - name: Setup git
            run: |
                git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
                git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
                git config --global commit.gpgsign true
                git config --global user.signingkey $GPG_KEY_ID
                git config --global gpg.program /tmp/gpg.sh
            env:
                GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

          # - name: Commit Changes
          #   run: |
          #       cd ${{ github.workspace }}/source-repo/output
          #       if [ -n "$(git status --porcelain)" ]; then
          #       git pull origin
          #       git add .
          #       git commit  -m "Add get-environment-secret.txt - $(date +"%Y-%m-%d %H:%M:%S")" 
          #       git push
          #       else
          #       echo "No changes to commit."
          #       fi
          #       cd ${{ github.workspace }}
          #   env:
          #       GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
          #       working-directory: ${{ github.workspace }}

  filter-environment-secrets-file:
    needs: fetch-environments-secrets
    runs-on: ubuntu-latest
    env:
      DEST_PAT_TOKEN: Dummy
    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.GK_PAT }}
            path: ./source-repo

      - name: Download environment secrets file as artifact
        uses: actions/download-artifact@v4
        with:
            name: get-environment-secrets.txt
            path: ./source-repo/output  # Download to the current directory

      - name: Process environment names and fetch secrets
        run: |
          while IFS= read -r line; do
            repository=$(echo "$line" | awk -F ';' '{print $1}')
            environment=$(echo "$line" | awk -F ';' '{print $2}')
            secrets=$(echo "$line" | awk -F ';' '{print $3}')
            
            echo "Repository: $repository, Environment: $environment, Secrets: $secrets"
              
              # Check if the environment or secrets are "No-Secrets" or "No-Environment"
              if [ "$environment" != "No-Environment" ] && [ "$secrets" != "No-Secrets" ]; then
                # Output the record to the output file
                echo "$repository;$environment;$secrets;${{ env.DEST_PAT_TOKEN }}" >> "${{ github.workspace }}/source-repo/output/get-environment-secrets-filtered.txt"
              fi
          done < ./source-repo/output/get-environment-secrets.txt
          
      - name: Upload filtered environment secrets file as artifact
        uses: actions/upload-artifact@v4
        with:
            name: get-environment-secrets-filtered.txt
            path: ./source-repo/output
        
      - name: Import GPG key
        run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
            
      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
            rm -rf /tmp/gpg.sh
            echo '#!/bin/bash' >> /tmp/gpg.sh
            echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
            chmod +x /tmp/gpg.sh
    
      - name: Setup git
        run: |
            git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
            git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
            git config --global commit.gpgsign true
            git config --global user.signingkey $GPG_KEY_ID
            git config --global gpg.program /tmp/gpg.sh
        env:
            GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      # - name: Commit Changes
      #   run: |
      #       cd ${{ github.workspace }}/source-repo/output
      #       if [ -n "$(git status --porcelain)" ]; then
      #       git pull origin
      #       git add .
      #       git commit  -m "Add get-environment-secret.txt - $(date +"%Y-%m-%d %H:%M:%S")" 
      #       git push
      #       else
      #       echo "No changes to commit."
      #       fi
      #       cd ${{ github.workspace }}
      #   env:
      #       GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
      #       working-directory: ${{ github.workspace }}


  convert-to-excel:
    needs: filter-environment-secrets-file
    runs-on: ubuntu-latest
    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.GK_PAT }}
            path: ./source-repo

      - name: Install python
        uses: actions/setup-python@v2
        with:
            python-version: '3.x'
        
      - name: Install pandas
        run: pip install pandas openpyxl

      - name: Download environment secrets file as artifact
        uses: actions/download-artifact@v4
        with:
            name: get-environment-secrets-filtered.txt
            path: ./source-repo/output  # Download to the current directory

      - name: Listing the files
        run: |
            ls ${{ github.workspace }}/source-repo/output

      - name: Convert to Excel
        run: |
            python3 <<EOF
            import pandas as pd

            # Read the data from get-environment-secrets.txt
            data = pd.read_csv('${{ github.workspace }}/source-repo/output/get-environment-secrets-filtered.txt', delimiter=';', names=['Repository', 'Environment', 'Secret', 'Destination PAT'])

            # Save as Excel file
            data.to_excel('${{ github.workspace }}/source-repo/output/get-environment-secrets.xlsx', index=False)
            EOF

      - name: Upload get-environment-secrets.xlsx as artifact
        uses: actions/upload-artifact@v4
        with:
            name: get-environment-secrets.xlsx
            path: ./source-repo/output
        
      - name: Import GPG key
        run: |
            echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
            GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
            rm -rf /tmp/gpg.sh
            echo '#!/bin/bash' >> /tmp/gpg.sh
            echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
            chmod +x /tmp/gpg.sh

      - name: Setup git
        run: |
            git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
            git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
            git config --global commit.gpgsign true
            git config --global user.signingkey $GPG_KEY_ID
            git config --global gpg.program /tmp/gpg.sh
        env:
            GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      # - name: Commit Changes
      #   run: |
      #       cd ${{ github.workspace }}/source-repo/output
      #       if [ -n "$(git status --porcelain)" ]; then
      #       git pull origin
      #       git add .
      #       git commit  -m "Add get-environment-secret.xlsx - $(date +"%Y-%m-%d %H:%M:%S")" 
      #       git push
      #       else
      #       echo "No changes to commit."
      #       fi
      #       cd ${{ github.workspace }}
      #   env:
      #       GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
      #       working-directory: ${{ github.workspace }}

  transform-excel:
    needs: convert-to-excel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.GK_PAT }}
            path: ./source-repo

      - name: Install python
        uses: actions/setup-python@v2
        with:
            python-version: '3.x'
        
      - name: Install pandas
        run: pip install pandas openpyxl
    
      - name: Download get-environment-secrets.xlsx as artifact
        uses: actions/download-artifact@v4
        with:
            name: get-environment-secrets.xlsx
            path: ./source-repo/output  # Download to the current directory

      - name: Perform data transformation
        run: |
          python3 <<EOF
          import pandas as pd

          # Read the data from get-environment-secrets.xlsx
          data = pd.read_excel('${{ github.workspace }}/source-repo/output/get-environment-secrets.xlsx')

          # Add a new column 'Destination Repository ID' to data
          data['Destination Repository ID'] = ''

          # Read the data from FileB
          digital_to_emu_df = pd.read_excel('${{ github.workspace }}/source-repo/files/Digital_To_EMU_Input_Sheet.xlsx')

          # Perform matching and replacement
          # Assuming FileA Repository Name matches with FileB Source Repository Name
          for index, row in data.iterrows():
              repository_name = row['Repository']
              matching_row = digital_to_emu_df[digital_to_emu_df['Source Repo Name'] == repository_name]
              if not matching_row.empty:
                  # Update the Destination Repository ID
                  data.at[index, 'Destination Repository ID'] = matching_row.iloc[0]['Destination Repository ID']
                  data.at[index, 'Destination PAT'] = matching_row.iloc[0]['Destination PAT']

          # Save as Excel file
          data.to_excel('${{ github.workspace }}/source-repo/output/transformed-environment-secrets.xlsx', index=False)
          EOF
      
      - name: Upload transformed-environment-secrets.xlsx as artifact
        uses: actions/upload-artifact@v4
        with:
          name: transformed-environment-secrets.xlsx
          path: ./source-repo/output
          
      - name: Import GPG key
        run: |
            echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
            GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
            rm -rf /tmp/gpg.sh
            echo '#!/bin/bash' >> /tmp/gpg.sh
            echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
            chmod +x /tmp/gpg.sh

      - name: Setup git
        run: |
            git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
            git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
            git config --global commit.gpgsign true
            git config --global user.signingkey $GPG_KEY_ID
            git config --global gpg.program /tmp/gpg.sh
        env:
            GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
  
      # - name: Commit Changes
      #   run: |
      #       cd ${{ github.workspace }}/source-repo/output
      #       if [ -n "$(git status --porcelain)" ]; then
      #       git pull origin
      #       git add .
      #       git commit  -m "Add get-environment-secret.xlsx - $(date +"%Y-%m-%d %H:%M:%S")" 
      #       git push
      #       else
      #       echo "No changes to commit."
      #       fi
      #       cd ${{ github.workspace }}
      #   env:
      #       GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
      #       working-directory: ${{ github.workspace }}

  convert-to-json:
    needs: transform-excel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.GK_PAT }}
            path: ./source-repo

      - name: Install python
        uses: actions/setup-python@v2
        with:
            python-version: '3.x'
        
      - name: Install pandas
        run: pip install pandas openpyxl 
    
      - name: Download transformed-environment-secrets.xlsx as artifact
        uses: actions/download-artifact@v4
        with:
            name: transformed-environment-secrets.xlsx
            path: ./source-repo/output  # Download to the current directory

      - name: Perform data transformation
        run: |
          python3 <<EOF
          import pandas as pd
          import json

          # Read the data from transformed-environment-secrets.xlsx
          data = pd.read_excel('${{ github.workspace }}/source-repo/output/transformed-environment-secrets.xlsx')

          # Convert to JSON
          json_data = {}
          for index, row in data.iterrows():
              repo_name = row['Repository']
              env_name = row['Environment']
              secret_name = row['Secret']
              repository_id = row['Destination Repository ID']
              pat_name = row['Destination PAT']
                           
              # Add secret details to the environment dictionary
              row_data = {
                  "repository": repo_name,
                  "secretname": secret_name,
                  "destinationEnvironmentName": env_name,
                  "destinationRepositoryId": str(repository_id),  # Convert to string to maintain consistency
                  "destinationPersonalAccessTokenName": pat_name
              }
              
              json_data[secret_name] = row_data

          # Save as JSON file
          with open('${{ github.workspace }}/source-repo/output/transformed-environment-secrets.json', 'w') as json_file:
              json.dump(json_data, json_file, indent=4)
          EOF
      
      - name: Upload transformed-environment-secrets.json as artifact
        uses: actions/upload-artifact@v4
        with:
          name: transformed-environment-secrets.json
          path: ./source-repo/output
            
      - name: Import GPG key
        run: |
            echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
            GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
            rm -rf /tmp/gpg.sh
            echo '#!/bin/bash' >> /tmp/gpg.sh
            echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
            chmod +x /tmp/gpg.sh

      - name: Setup git
        run: |
            git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
            git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
            git config --global commit.gpgsign true
            git config --global user.signingkey $GPG_KEY_ID
            git config --global gpg.program /tmp/gpg.sh
        env:
            GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
    
      # - name: Commit Changes
      #   run: |
      #       cd ${{ github.workspace }}/source-repo/output
      #       if [ -n "$(git status --porcelain)" ]; then
      #       git pull origin
      #       git add .
      #       git commit  -m "Add get-environment-secret.xlsx - $(date +"%Y-%m-%d %H:%M:%S")" 
      #       git push
      #       else
      #       echo "No changes to commit."
      #       fi
      #       cd ${{ github.workspace }}
      #   env:
      #       GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
      #       working-directory: ${{ github.workspace }}

  generate-repo-specific-json:
    needs: convert-to-json
    runs-on: ubuntu-latest
    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.GK_PAT }}
            path: ./source-repo
    
      - name: Download transformed-environment-secrets.json as artifact
        uses: actions/download-artifact@v4
        with:
            name: transformed-environment-secrets.json
            path: ./source-repo/output  # Download to the current directory
    
      - name: Generate repository-specific JSON files
        run: |
            python3 <<EOF
            import json
            import os
    
            # Load the converted JSON file
            with open('${{ github.workspace }}/source-repo/output/transformed-environment-secrets.json', 'r') as json_file:
                data = json.load(json_file)
    
            # Iterate through the data and generate repository-specific JSON files
            for secret_name, secret_data in data.items():
              repository_full_name = secret_data['repository']
              _, repo_name = repository_full_name.split('/')

              # Remove the 'repository' key from the data
              del secret_data['repository']
              
              specific_json_file = os.path.join('${{ github.workspace }}/source-repo/output', f'{repo_name}-env-spec.json')
              if not os.path.exists(specific_json_file):
                  with open(specific_json_file, 'w') as specific_json:
                      specific_json.write(json.dumps({secret_name: secret_data}, indent=4))
              else:
                  with open(specific_json_file, 'r+') as specific_json:
                      specific_data = json.load(specific_json)
                      specific_data[secret_name] = secret_data
                      specific_json.seek(0)
                      specific_json.truncate()
                      specific_json.write(json.dumps(specific_data, indent=4))
            EOF
    
      - name: Upload repository-specific JSON files as artifacts
        uses: actions/upload-artifact@v4
        with:
            name: environment-specific-json
            path: ./source-repo/output/*.json
    
      - name: Import GPG key
        run: |
            echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
            GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        
      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
            rm -rf /tmp/gpg.sh
            echo '#!/bin/bash' >> /tmp/gpg.sh
            echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
            chmod +x /tmp/gpg.sh
        
      - name: Setup git
        run: |
            git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
            git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
            git config --global commit.gpgsign true
            git config --global user.signingkey $GPG_KEY_ID
            git config --global gpg.program /tmp/gpg.sh
        env:
            GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
    
      - name: Commit Changes
        run: |
            cd ${{ github.workspace }}/source-repo/output
            if [ -n "$(git status --porcelain)" ]; then
                git pull origin main
                git add .
                git commit -S -m "Add repository-specific JSON files - $(date +"%Y-%m-%d %H:%M:%S")" 
                git push origin main
            else
                echo "There are no changes to commit."
            fi
        working-directory: ${{ github.workspace }}
        env:
            GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}