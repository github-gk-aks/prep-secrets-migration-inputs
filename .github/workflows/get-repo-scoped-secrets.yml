name: Fetch Repository Secrets

on:
  workflow_dispatch:


jobs:
  fetch-repo-secrets:
    runs-on: ubuntu-latest
    env:
        DEST_PAT_TOKEN: Dummy
    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GK_PAT }}
          path: ./source-repo

      - name: Check if output directory exists
        run: |
          if [ ! -d "${{ github.workspace }}/source-repo/output" ]; then
            echo "Output directory does not exist. Creating..."
            mkdir -p "${{ github.workspace }}/source-repo/output"
          else
            echo "Output directory already exists."
          fi
  
      - name: Import GPG key
        run: |
          echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
          rm -rf /tmp/gpg.sh
          echo '#!/bin/bash' >> /tmp/gpg.sh
          echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
          chmod +x /tmp/gpg.sh

      - name: Setup git
        run: |
          git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
          git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
          git config --global commit.gpgsign true
          git config --global user.signingkey $GPG_KEY_ID
          git config --global gpg.program /tmp/gpg.sh
        env:
          GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}

      - name: Fetch Repository Scoped Secrets
        run: |
            mapfile -t repositories < "${{ github.workspace }}/source-repo/repositories.txt"
            for repo in "${repositories[@]}"; do
                IFS='/' read -r org_name repo_name <<< "$repo"
                echo "Processing repository: $org_name/$repo_name" 
                response=$(curl -s -L \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer ${{ secrets.GK_PAT }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/$repo/actions/secrets")

                total_count=$(echo "$response" | jq -r '.total_count')

                if [ "$total_count" -eq 0 ]; then
                    echo "$repo_name;$org_name;${{ env.DEST_PAT_TOKEN }};No secrets" >> ${{ github.workspace }}/source-repo/output/repo-scoped-secrets.txt
                else                    
                    secrets=$(echo "$response" | jq -r '.secrets | .[] | .name')
                    for secret in $secrets; do
                        echo "$repo_name;$org_name;${{ env.DEST_PAT_TOKEN }};$secret" >> ${{ github.workspace }}/source-repo/output/repo-scoped-secrets.txt
                    done         
                    # secrets=$(echo "$response" | jq -r '.secrets | map(.name) | join(", ")')
                    # echo "$repo_name;$org_name;${{ env.DEST_PAT_TOKEN }};$secrets" >> ${{ github.workspace }}/source-repo/output/repo-scoped-secrets.txt
                fi   
            done
        
      - name: Upload result_codeowners.txt as artifact
        uses: actions/upload-artifact@v4
        with:
            name: repo-scoped-secrets.txt
            path: ./source-repo/output

    #   - name: Commit Changes
    #     run: |
    #         cd ${{ github.workspace }}/source-repo/output
    #         if [ -n "$(git status --porcelain)" ]; then
    #             git pull origin main
    #             git add repo-scoped-secrets.txt
    #             git commit -S -m "Add repository scoped secrets.txt - $(date +"%Y-%m-%d %H:%M:%S")" 
    #             git push origin main
    #         else
    #             echo "There are no changes to commit."
    #         fi
    #     working-directory: ${{ github.workspace }}
    #     env:
    #         GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}
    
  convert-to-excel:
    needs: fetch-repo-secrets
    runs-on: ubuntu-latest
    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.GK_PAT }}
            path: ./source-repo

      - name: Install python
        uses: actions/setup-python@v2
        with:
            python-version: '3.x'
        
      - name: Install pandas
        run: pip install pandas openpyxl
    
      - name: Download repository scoped secret txt file artifact
        uses: actions/download-artifact@v4
        with:
           name: repo-scoped-secrets.txt
           path: ./source-repo/output  # Download to the current directory

      - name: Listing the files
        run: |
            ls ${{ github.workspace }}/source-repo/output

      - name: Convert to Excel
        run: |
            python3 <<EOF
            import pandas as pd

            # Read the data from repo-scoped-secrets.txt
            data = pd.read_csv('${{ github.workspace }}/source-repo/output/repo-scoped-secrets.txt', delimiter=';', names=['Repository', 'Organization', 'Destination PAT', 'Repository Token'])

            # Save as Excel file
            data.to_excel('${{ github.workspace }}/source-repo/output/repo-scoped-secrets.xlsx', index=False)
            EOF

      - name: Upload repo-scoped-secrets.xlsx as artifact
        uses: actions/upload-artifact@v4
        with:
            name: repo-scoped-secrets.xlsx
            path: ./source-repo/output
        
      - name: Import GPG key
        run: |
            echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
            GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
    
      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
            rm -rf /tmp/gpg.sh
            echo '#!/bin/bash' >> /tmp/gpg.sh
            echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
            chmod +x /tmp/gpg.sh
    
      - name: Setup git
        run: |
            git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
            git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
            git config --global commit.gpgsign true
            git config --global user.signingkey $GPG_KEY_ID
            git config --global gpg.program /tmp/gpg.sh
        env:
            GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
    

    #   - name: Commit Changes
    #     run: |
    #         cd ${{ github.workspace }}/source-repo/output
    #         if [ -n "$(git status --porcelain)" ]; then
    #             git pull origin main
    #             git add .
    #             git commit -S -m "Add repository scoped secrets xlsx - $(date +"%Y-%m-%d %H:%M:%S")" 
    #             git push origin main
    #         else
    #             echo "There are no changes to commit."
    #         fi
    #     working-directory: ${{ github.workspace }}
    #     env:
    #         GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}

  transform-excel:
    needs: convert-to-excel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout central repository
        uses: actions/checkout@v4
        with:
            token: ${{ secrets.GK_PAT }}
            path: ./source-repo

      - name: Install python
        uses: actions/setup-python@v2
        with:
            python-version: '3.x'
        
      - name: Install pandas
        run: pip install pandas openpyxl
    
      - name: Download repository scoped secret excel file artifact
        uses: actions/download-artifact@v4
        with:
            name: repo-scoped-secrets.xlsx
            path: ./source-repo/output  # Download to the current directory

      - name: Listing the files
        run: |
            ls ${{ github.workspace }}/source-repo/output

      - name: Convert to Excel
        run: |
            python3 <<EOF
            import pandas as pd

            # Read data from Excel files
            repo_scoped_secrets_df = pd.read_excel('${{ github.workspace }}/source-repo/output/repo-scoped-secrets.xlsx')
            digital_to_emu_df = pd.read_excel('${{ github.workspace }}/source-repo/files/Digital_To_EMU_Input_Sheet.xlsx')

            # Iterate through each row in repo-scoped-secrets dataframe
            for index, row in repo_scoped_secrets_df.iterrows():
                # Find corresponding row in digital_to_emu dataframe
                matching_row = digital_to_emu_df[digital_to_emu_df['Source Repo'] == row['Repository']]
                if not matching_row.empty:
                    # Replace organization and destination PAT
                    repo_scoped_secrets_df.at[index, 'Organization'] = matching_row.iloc[0]['Target Org Name']
                    repo_scoped_secrets_df.at[index, 'Destination PAT'] = matching_row.iloc[0]['Destination PAT']

            # Write updated dataframe back to Excel file
            repo_scoped_secrets_df.to_excel('${{ github.workspace }}/source-repo/output/repo-scoped-secrets-transformed.xlsx', index=False)
            EOF
    
      - name: Import GPG key
        run: |
            echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
        env: 
            GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        
      - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
        run: |
            rm -rf /tmp/gpg.sh
            echo '#!/bin/bash' >> /tmp/gpg.sh
            echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
            chmod +x /tmp/gpg.sh
        
      - name: Setup git
        run: |
            git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
            git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
            git config --global commit.gpgsign true
            git config --global user.signingkey $GPG_KEY_ID
            git config --global gpg.program /tmp/gpg.sh
        env:
            GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
        
      - name: Upload repo-scoped-secrets.xlsx as artifact
        uses: actions/upload-artifact@v4
        with:
            name: repo-scoped-secrets-transformed.xlsx
            path: ./source-repo/output
    
    #   - name: Commit Changes
    #     run: |
    #         cd ${{ github.workspace }}/source-repo/output
    #         if [ -n "$(git status --porcelain)" ]; then
    #             git pull origin main
    #             git add .
    #             git commit -S -m "Add transformed repository scoped secrets xlsx - $(date +"%Y-%m-%d %H:%M:%S")" 
    #             git push origin main
    #         else
    #             echo "There are no changes to commit."
    #         fi
    #     working-directory: ${{ github.workspace }}
    #     env:
    #         GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}

  convert-to-json:
        needs: transform-excel
        runs-on: ubuntu-latest
        steps:
          - name: Checkout central repository
            uses: actions/checkout@v4
            with:
                token: ${{ secrets.GK_PAT }}
                path: ./source-repo
    
          - name: Install python
            uses: actions/setup-python@v2
            with:
                python-version: '3.x'
            
          - name: Install pandas
            run: pip install pandas openpyxl
        
          - name: Download repository scoped secret excel file artifact
            uses: actions/download-artifact@v4
            with:
                name: repo-scoped-secrets-transformed.xlsx
                path: ./source-repo/output  # Download to the current directory
    
          - name: Listing the files
            run: |
                ls ${{ github.workspace }}/source-repo/output

          - name: Convert to JSON
            run: |
                python3 <<EOF
                import pandas as pd
                import json
    
                # Read data from Excel files
                repo_scoped_secrets_df = pd.read_excel('${{ github.workspace }}/source-repo/output/repo-scoped-secrets-transformed.xlsx')
    
                # Initialize JSON object
                json_data = {}
    
                # Iterate through each row in repo-scoped-secrets dataframe
                for index, row in repo_scoped_secrets_df.iterrows():
                    secret_name = row['Repository Token']
                    json_data[secret_name] = {
                        'secretname': secret_name,
                        'destinationRepositoryName': row['Repository'],
                        'destinationRepositoryOwner': row['Organization'],
                        'destinationPersonalAccessTokenName': row['Destination PAT']
                    }
    
                # Write JSON data to file
                with open('${{ github.workspace }}/source-repo/output/repo-scoped-secrets.json', 'w') as json_file:
                    json.dump(json_data, json_file, indent=4)
                EOF
        
          - name: Import GPG key
            run: |
                echo "${GPG_PRIVATE_KEY}" | gpg --batch --import
            env: 
                GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
            
          - name: Add the custom gpg signing program that passes the passphrase to the gpg CLI
            run: |
                rm -rf /tmp/gpg.sh
                echo '#!/bin/bash' >> /tmp/gpg.sh
                echo 'gpg --batch --pinentry-mode=loopback --passphrase $GPG_KEY_PASSPHRASE $@' >> /tmp/gpg.sh
                chmod +x /tmp/gpg.sh
            
          - name: Setup git
            run: |
                git config --global user.email ${{ secrets.GIT_COMMITTER_EMAIL }}
                git config --global user.name ${{ secrets.GIT_COMMITTER_NAME }}
                git config --global commit.gpgsign true
                git config --global user.signingkey $GPG_KEY_ID
                git config --global gpg.program /tmp/gpg.sh
            env:
                GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
            
        
          - name: Commit Changes
            run: |
                cd ${{ github.workspace }}/source-repo/output
                if [ -n "$(git status --porcelain)" ]; then
                    git pull origin main
                    git add .
                    git commit -S -m "Add transformed repository scoped secrets json - $(date +"%Y-%m-%d %H:%M:%S")" 
                    git push origin main
                else
                    echo "There are no changes to commit."
                fi
            working-directory: ${{ github.workspace }}
            env:
                GPG_KEY_PASSPHRASE: ${{ secrets.PASSPHRASE }}

